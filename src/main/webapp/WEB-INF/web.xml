<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
         
    <!-- 세션 유지시간 설정하기(단위:분)시작 -->
    <session-config>
    	<session-timeout>60</session-timeout>
    </session-config>
    <!-- 세션 유지시간 설정하기(단위:분)끝 -->
         

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:config/spring/root-context.xml
		</param-value>
    <!-- classpath:config/spring/security-context.xml -->
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:config/spring/servlet-context.xml</param-value>
		</init-param>
		<!-- 404오류를 처리할 수 있도록 함 -->
		<init-param>
			<param-name>throwExceptionIfNoHandlerFound</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<!-- 파일업로드 설정 -->
		<multipart-config>
			<location>d:/temp</location>
			<max-file-size>209715200</max-file-size>
			<max-request-size>209815200</max-request-size>
			<file-size-threshold>0</file-size-threshold>
		</multipart-config>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

    <!--  한글처리 인코딩 UTF-8 -->
	<filter>
          <filter-name>encodingFilter</filter-name>
          <filter-class>org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
                <param-name>encoding</param-name>
                <param-value>UTF-8</param-value>
           </init-param>
           <init-param>
                <param-name>forceEncoding</param-name>
                <param-value>true</param-value>
           </init-param>
     </filter>
     <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
     </filter-mapping>

	<!-- 파일업로드에 Security 사용시 csrf 토큰처리 -->
	<!-- ckeditor 같은 거 사용시 안에 파일 올릴 때 토큰 처리가 안돼서 get방식 처리해야 되는데, 그 때 사용하는 것이 springMultipartFilter임 -->
	<filter>
		<display-name>springMultipartFilter</display-name>
		<filter-name>springMultipartFilter</filter-name>
		<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springMultipartFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

    <!-- 시큐리티 필터 등록   -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- HTTP Method Filter, input hidden에 put 보내려고 추가 -->
	<filter>
	   <filter-name>httpMethodFilter</filter-name>
	   <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
	   <filter-name>httpMethodFilter</filter-name>
	   <url-pattern>/*</url-pattern>
	</filter-mapping>

<!-- 상태 코드를 사용하여 오류 페이지 설정 시작
	web.xml : tomcat서버의 설정
			  스프링 웹 프로젝트가 실행되면 가장 먼저 web.xml 파일을 읽어들이고
			  위부터 아래로 차례로 읽어들이면서 태그를 해석함
	HTTP 오류 코드
	400  : Bad Request. 문법 오류(잘못 입력한 url)
	404* : Not Found. 요청한 문서를 못찾음(url확인 및 캐시 삭제 필요)
	405  : Method not allowed. 메소드 허용 안됨(메소드 매핑이 안 될때)
	415  : 서버 요청에 대한 승인 거부(ContentType, Content Encoding 데이터 확인 필요)
	500* : 서버 내부 오류. (웹 서버가 요청사항을 수행할 수 없음. 개발자 오류)
	505  : Http Version Not Supported
	
	error-code : HTTP상태 코드
	location : 이동 대상 페이지 또는 URI
	 -->
<!-- 	 <error-page> -->
<!-- 	 	<error-code>400</error-code> -->
<!-- 	 	<location>/error/error400</location> -->
<!-- 	 </error-page> -->
<!-- 	 <error-page> -->
<!-- 	 	<error-code>404</error-code> -->
<!-- 	 	<location>/error/error404</location> -->
<!-- 	 </error-page> -->
<!-- 	 <error-page> -->
<!-- 	 	<error-code>500</error-code> -->
<!-- 	 	<location>/error/error500</location> -->
<!-- 	 </error-page> -->
	<!-- 상태 코드를 사용하여 오류 페이지 설정 끝 -->
	
	<!-- 예외 타입을 사용한 에러 페이지 설정 시작 
	웹 컨테이너(tomcat서버) 설정 파일(web.xml)의 exception-type 태그 요소에 예외 타입을 설정하고
	location 요소에 이동 대상 페이지 및 URI를 지정함
	
	IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException,
	ArtimeticException(0으로 나눌경우)
	-->
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/error/errorException</location>
	</error-page>	
	<!-- 예외 타입을 사용한 에러 페이지 설정 끝 -->
	
	<!-- 기본 에러 페이지 설정 시작 
	웹 컨테이너(tomcat서버) 설정 파일(web.xml)의 
	-->
<!-- 	<error-page> -->
<!-- 		<location>/error/errorDefault</location> -->
<!-- 	</error-page> -->
	<!-- 기본 에러 페이지 설정 끝 -->
</web-app>